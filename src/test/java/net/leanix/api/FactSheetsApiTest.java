/*
 * LeanIX Pathfinder REST API
 * Core application for storage and analysis of IT landscape data
 *
 * OpenAPI spec version: 0.1.9-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.leanix.api;

import net.leanix.api.common.ApiException;
import net.leanix.api.models.BasicPFResponse;
import net.leanix.api.models.FactSheet;
import net.leanix.api.models.FactSheetArchiveParameter;
import net.leanix.api.models.FactSheetListResponse;
import net.leanix.api.models.FactSheetResponse;
import net.leanix.api.models.RelationListResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FactSheetsApi
 */
@Ignore
public class FactSheetsApiTest {

    private final FactSheetsApi api = new FactSheetsApi();

    
    /**
     * deleteFactSheet
     *
     * Deletes a Fact Sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveFactSheetTest() throws ApiException {
        String id = null;
        FactSheetArchiveParameter body = null;
        BasicPFResponse response = api.archiveFactSheet(id, body);

        // TODO: test validations
    }
    
    /**
     * createFactSheet
     *
     * Creates a Fact Sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFactSheetTest() throws ApiException {
        FactSheet body = null;
        FactSheetResponse response = api.createFactSheet(body);

        // TODO: test validations
    }
    
    /**
     * getFactSheet
     *
     * Retrieves a Fact Sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFactSheetTest() throws ApiException {
        String id = null;
        String relationTypes = null;
        FactSheetResponse response = api.getFactSheet(id, relationTypes);

        // TODO: test validations
    }
    
    /**
     * getFactSheetRelations
     *
     * Retrieves all relations of a Fact Sheet, with the given type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFactSheetRelationsTest() throws ApiException {
        String id = null;
        String type = null;
        Boolean withFactSheets = null;
        RelationListResponse response = api.getFactSheetRelations(id, type, withFactSheets);

        // TODO: test validations
    }
    
    /**
     * getFactSheets
     *
     * Retrieves all Fact Sheets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFactSheetsTest() throws ApiException {
        String type = null;
        String relationTypes = null;
        Integer pageSize = null;
        String cursor = null;
        FactSheetListResponse response = api.getFactSheets(type, relationTypes, pageSize, cursor);

        // TODO: test validations
    }
    
    /**
     * updateFactSheet
     *
     * Updates a Fact Sheet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFactSheetTest() throws ApiException {
        String id = null;
        FactSheet body = null;
        String relationTypes = null;
        FactSheetResponse response = api.updateFactSheet(id, body, relationTypes);

        // TODO: test validations
    }
    
}
